parameters:
  additionalBuildArguments: ''

steps:
- checkout: self
  fetchDepth: 1
  submodules: true
  clean: true

- template: verify-ARM64.yml
  parameters:
    additionalBuildArguments: ${{ parameters.additionalBuildArguments }}

- task: PowerShell@2
  displayName: Verifying Nuget packages for PowerToys.sln
  inputs:
    filePath: '$(build.sourcesdirectory)\.pipelines\verifyNugetPackages.ps1'
    arguments: -solution '$(build.sourcesdirectory)\PowerToys.sln'
    pwsh: true

- task: VisualStudioTestPlatformInstaller@1
  displayName: Ensure VSTest Platform

- task: UseDotNet@2
  displayName: 'Use .NET Core 2.1 SDK'
  inputs:
    packageType: sdk
    version: '2.1.x'

- task: UseDotNet@2
  displayName: 'Use .NET 7 SDK'
  inputs:
    packageType: sdk
    version: '7.x'

- task: NuGetAuthenticate@0
      
- task: NuGetToolInstaller@1
  displayName: Use NuGet Installer latest

# this will restore the following nugets:
# - main solution
# - Bug report tool
# - Webcam report tool
# - Installer
# - Bootstrapper Installer
- task: NuGetCommand@2
  displayName: NuGet restore solutions dependencies
  inputs:
    command: restore
    restoreSolution: '**/*.sln'
    selectOrConfig: config
    nugetConfigPath: NuGet.config
      
- task: VSBuild@1
  displayName: 'Build PowerToys.sln'
  inputs:
    solution: '**\PowerToys.sln'
    vsVersion: 17.0
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArgs: ${{ parameters.additionalBuildArguments }}
    maximumCpuCount: true

- task: VSBuild@1
  displayName: 'Build BugReportTool.sln'
  inputs:
    solution: '**\BugReportTool.sln'
    vsVersion: 17.0
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArgs: ${{ parameters.additionalBuildArguments }}
    maximumCpuCount: true

- task: VSBuild@1
  displayName: 'Build WebcamReportTool.sln'
  inputs:
    solution: '**\WebcamReportTool.sln'
    vsVersion: 17.0
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArgs: ${{ parameters.additionalBuildArguments }}
    maximumCpuCount: true

- task: VSBuild@1
  displayName: 'Build StylesReportTool.sln'
  inputs:
    solution: '**\StylesReportTool.sln'
    vsVersion: 17.0
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArgs: ${{ parameters.additionalBuildArguments }}
    maximumCpuCount: true

- task: PowerShell@2
  displayName: Download and install WiX 3.14 development build
  inputs:
    targetType: filePath
    filePath: '$(build.sourcesdirectory)\.pipelines\installWiX.ps1'

- task: VSBuild@1
  displayName: 'Build PowerToys MSI'
  inputs:
    solution: '**\installer\PowerToysSetup.sln'
    vsVersion: 17.0
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArgs: /t:PowerToysInstaller ${{ parameters.additionalBuildArguments }}
    maximumCpuCount: true

- task: VSBuild@1
  displayName: 'Build PowerToys Bootstrapper'
  inputs:
    solution: '**\installer\PowerToysSetup.sln'
    vsVersion: 17.0
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArgs: /t:PowerToysBootstrapper ${{ parameters.additionalBuildArguments }}
    clean: false
    maximumCpuCount: true

# directly not doing WinAppDriver testing
- task: VSTest@2
  displayName: 'MS Tests'
  condition: ne(variables['BuildPlatform'], 'arm64') # No arm64 agents to run the tests.
  inputs:
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\UnitTests-GcodeThumbnailProvider.dll
      **\UnitTests-StlThumbnailProvider.dll
      **\UnitTests-PdfThumbnailProvider.dll
      **\Settings.UI.UnitTests.dll
      **\UnitTests-GcodePreviewHandler.dll
      **\UnitTests-PdfPreviewHandler.dll
      **\UnitTests-PreviewHandlerCommon.dll
      **\Microsoft.PowerToys.Run.Plugin.Registry.UnitTests.dll
      **\UnitTest-ColorPickerUI.dll
      **\Microsoft.Interop.Tests.dll
      **\ImageResizer.Test.dll
      **\Community.PowerToys.Run.Plugin.UnitConverter.UnitTest.dll
      **\Microsoft.Plugin.Folder.UnitTests.dll
      **\Microsoft.Plugin.Program.UnitTests.dll
      **\Microsoft.PowerToys.Run.Plugin.Calculator.UnitTest.dll
      **\Microsoft.Plugin.Uri.UnitTests.dll
      **\Wox.Test.dll
      **\Microsoft.PowerToys.Run.Plugin.System.UnitTests.dll
      **\Microsoft.PowerToys.Run.Plugin.TimeDate.UnitTests.dll
      **\Microsoft.PowerToys.Run.Plugin.TimeZone.UnitTests.dll
      **\Microsoft.Plugin.WindowsTerminal.UnitTests.dll
      **\Microsoft.Plugin.WindowWalker.UnitTests.dll
      **\PreviewPaneUnitTests.dll
      **\UnitTests-SvgThumbnailProvider.dll
      **\UnitTests-SvgPreviewHandler.dll
      **\PowerToys.Hosts.Tests.dll
      !**\obj\**
      !**\ref\**

# Native dlls
- task: VSTest@2
  condition: ne(variables['BuildPlatform'],'arm64') # No arm64 agents to run the tests.
  displayName: 'Native Tests'
  inputs:
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\KeyboardManagerEngineTest.dll
      **\KeyboardManagerEditorTest.dll
      **\UnitTests-CommonLib.dll
      **\PowerRenameUnitTests.dll
      **\powerpreviewTest.dll
      **\UnitTests-FancyZones.dll
      !**\obj\**
